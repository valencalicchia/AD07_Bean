package mat;

import java.io.Serializable;
import java.sql.*;
import java.util.ArrayList;
import java.util.EventListener;
import java.util.EventObject;
import java.util.List;

public class MatriculaBean implements Serializable {
    // Propiedades
    private String DNI;
    private String nombreModulo;
    private String curso;
    private double nota;
    private String modo;
    
    // Estructuras internas
    private List<Matricula> matriculas;
    private Connection conexion;
    
    // Gestión de eventos
    private transient ModoCambiadoListener receptor;
    
    // Constructor
    public MatriculaBean() {
        matriculas = new ArrayList<>();
        conectarBD();
    }
    
    // Métodos de conexión a BD
    private void conectarBD() {
        try {
            Class.forName("com.mysql.jdbc.Driver");
            conexion = DriverManager.getConnection(
                "jdbc:mysql://localhost/alumnos", "dam7", "ad07");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    // Métodos para propiedades
    public String getDNI() { return DNI; }
    public void setDNI(String DNI) { this.DNI = DNI; }
    
    public String getNombreModulo() { return nombreModulo; }
    public void setNombreModulo(String nombreModulo) { this.nombreModulo = nombreModulo; }
    
    public String getCurso() { return curso; }
    public void setCurso(String curso) { this.curso = curso; }
    
    public double getNota() { return nota; }
    public void setNota(double nota) { this.nota = nota; }
    
    public String getModo() { return modo; }
    private void setModo(String modo) { 
        this.modo = modo;
        if (receptor != null) {
            receptor.modoCambiado(new ModoCambiadoEvent(this));
        }
    }
    
    // Métodos principales
    public void cargarTodasMatriculas() {
        matriculas.clear();
        try {
            Statement stmt = conexion.createStatement();
            ResultSet rs = stmt.executeQuery(
                "SELECT * FROM matriculas ORDER BY DNI");
            
            while (rs.next()) {
                matriculas.add(new Matricula(
                    rs.getString("DNI"),
                    rs.getString("NombreModulo"),
                    rs.getString("Curso"),
                    rs.getDouble("Nota")
                ));
            }
            setModo("completo");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    
    public void recargarDNI(String dni) {
        matriculas.clear();
        try {
            PreparedStatement stmt = conexion.prepareStatement(
                "SELECT * FROM matriculas WHERE DNI = ?");
            stmt.setString(1, dni);
            ResultSet rs = stmt.executeQuery();
            
            while (rs.next()) {
                matriculas.add(new Matricula(
                    rs.getString("DNI"),
                    rs.getString("NombreModulo"),
                    rs.getString("Curso"),
                    rs.getDouble("Nota")
                ));
            }
            setModo("por DNI");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    
    public void seleccionarFila(int i) {
        if (i >= 0 && i < matriculas.size()) {
            Matricula m = matriculas.get(i);
            this.DNI = m.getDNI();
            this.nombreModulo = m.getNombreModulo();
            this.curso = m.getCurso();
            this.nota = m.getNota();
        }
    }
    
    public void addMatricula() {
        try {
            PreparedStatement stmt = conexion.prepareStatement(
                "INSERT INTO matriculas VALUES (?, ?, ?, ?)");
            stmt.setString(1, DNI);
            stmt.setString(2, nombreModulo);
            stmt.setString(3, curso);
            stmt.setDouble(4, nota);
            stmt.executeUpdate();
            
            // Recargar según el modo actual
            if ("por DNI".equals(modo)) {
                recargarDNI(DNI);
            } else {
                cargarTodasMatriculas();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    
    // Métodos para eventos
    public void addModoCambiadoListener(ModoCambiadoListener listener) {
        this.receptor = listener;
    }
    
    public void removeModoCambiadoListener(ModoCambiadoListener listener) {
        if (this.receptor == listener) {
            this.receptor = null;
        }
    }
    
    // Clase interna para representar matrículas
    private class Matricula implements Serializable {
        private String DNI;
        private String nombreModulo;
        private String curso;
        private double nota;
        
        public Matricula(String DNI, String nombreModulo, String curso, double nota) {
            this.DNI = DNI;
            this.nombreModulo = nombreModulo;
            this.curso = curso;
            this.nota = nota;
        }
        
        // Getters
        public String getDNI() { return DNI; }
        public String getNombreModulo() { return nombreModulo; }
        public String getCurso() { return curso; }
        public double getNota() { return nota; }
    }
    
    public class ModoCambiadoEvent extends EventObject {
        public ModoCambiadoEvent(Object source) {
            super(source);
        }
    }
    
    public interface ModoCambiadoListener extends EventListener {
        void modoCambiado(ModoCambiadoEvent ev);
    }
}

